%{
package com.ripple.frontend;

import com.ripple.database.*;
import com.ripple.database.binop.*;
import com.ripple.database.function.*;
import com.ripple.database.value.*;
import com.ripple.query.*;

import java.util.*;

public class Parser {

  private QueryManager manager;

  public Parser(QueryManager m) {
    manager = m;
  }

%}

%token SHOW DATABASES USE TABLES DESC SELECT FROM WHERE AND
%token SUM MAX MIN AVG COUNT GROUP ORDER BY
%token LT LE GT GE EQ NE
%token <String> INT
%token <String> FLOAT
%token <String> STRING
%token <String> IDENTIFIER

%type <List<Attribute>> func_or_attr_or_star_list
%type <Attribute> func_or_attr_or_star
%type <List<String>> relation_list
%type <List<Condition>> opt_where_clause
%type <List<Condition>> cond_list
%type <Condition> cond
%type <BinOp> op
%type <Value> value
%type <List<Attribute>> opt_group_by_clause
%type <List<Attribute>> attr_list
%type <Attribute> opt_order_by_clause
%type <Attribute> func_or_attr
%type <Function> function
%type <Attribute> attr

%start command

%%

command
  : SHOW DATABASES ';'
  {
    manager.showDatabases();
  }
  | USE IDENTIFIER ';'
  {
    manager.activeDatabase($2);
  }
  | SHOW TABLES ';'
  {
    manager.showRelations();
  }
  | DESC IDENTIFIER ';'
  {
    manager.descRelation($2);
  }
  | SELECT func_or_attr_or_star_list FROM relation_list opt_where_clause opt_group_by_clause opt_order_by_clause ';'
  {
    manager.select($2, $4, $5, $6, $7);
  }

func_or_attr_or_star_list
  : func_or_attr_or_star_list ',' func_or_attr_or_star
  {
    $<List<Attribute>>$.add($3);
  }
  | func_or_attr_or_star
  {
    $$ = new ArrayList<>();
    $<List<Attribute>>$.add($1);
  }


func_or_attr_or_star
  : func_or_attr
  {
    $$ = $1;
  }
  | IDENTIFIER '.' '*'
  {
    $$ = new Attribute($1, "*");
  }
  | '*'
  {
    $$ = new Attribute("*");
  }

relation_list
  : relation_list ',' IDENTIFIER
  {
    $<List<String>>$.add($3);
  }
  | IDENTIFIER
  {
    $$ = new ArrayList<>();
    $<List<String>>$.add($1);
  }

opt_where_clause
  : WHERE cond_list
  {
    $$ = $2;
  }
  | nothing
  {
    $$ = new ArrayList<>();
  }

cond_list
  : cond_list AND cond
  {
    $<List<Condition>>$.add($3);
  }
  | cond
  {
    $$ = new ArrayList<>();
    $<List<Condition>>$.add($1);
  }

cond
  : attr op attr
  {
    $$ = new Condition($1, $2, $3);
  }
  | attr op value
  {
    $$ = new Condition($1, $2, $3);
  }

op
  : LT
  {
    $$ = BinOp.ltOp;
  }
  | LE
  {
    $$ = BinOp.leOp;
  }
  | GT
  {
    $$ = BinOp.gtOp;
  }
  | GE
  {
    $$ = BinOp.geOp;
  }
  | EQ
  {
    $$ = BinOp.eqOp;
  }
  | NE
  {
    $$ = BinOp.neOp;
  }

value
  : STRING
  {
    $$ = new StringValue($1);
  }
  | INT
  {
    $$ = new IntValue($1);
  }
  | FLOAT
  {
    $$ = new FloatValue($1);
  }

opt_group_by_clause
  : GROUP BY attr_list
  {
    $$ = $3;
  }
  | nothing
  {
    $$ = new ArrayList<>();
  }

attr_list
  : attr_list ',' attr
  {
    $<List<Attribute>>$.add($3);
  }
  | attr
  {
    $$ = new ArrayList<>();
    $<List<Attribute>>$.add($1);
  }

opt_order_by_clause
  : ORDER BY func_or_attr
  {
    $$ = $3;
  }
  | nothing
  {
    $$ = null;
  }

func_or_attr
  : function '(' attr ')'
  {
    $$ = $3;
    $<Attribute>$.setFunction($1);
  }
  | attr
  {
    $$ = $1;
  }

function
  : SUM
  {
    $$ = Function.sumFunc;
  }
  | MAX
  {
    $$ = Function.maxFunc;
  }
  | MIN
  {
    $$ = Function.minFunc;
  }
  | AVG
  {
    $$ = Function.avgFunc;
  }
  | COUNT
  {
    $$ = Function.countFunc;
  }

attr
  : IDENTIFIER '.' IDENTIFIER
  {
    $$ = new Attribute($1, $3);
  }
  | IDENTIFIER
  {
    $$ = new Attribute($1);
  }

nothing
  : /* epsilon */
  {
  }

%%

} // closing brace for the parser class